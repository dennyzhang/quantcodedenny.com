#+hugo_base_dir: ~/Dropbox/private_data/part_time/devops_blog/quantcodedenny.com
#+language: en
#+AUTHOR: dennyzhang
#+HUGO_TAGS: engineering
#+TAGS: Important(i) noexport(n)
#+SEQ_TODO: TODO HALF ASSIGN | DONE CANCELED BYPASS DELEGATE DEFERRED
* Use LLM for vibe coding
:PROPERTIES:
:EXPORT_FILE_NAME: llm-for-vibe-coding
:EXPORT_DATE: 2025-08-25
:EXPORT_HUGO_SECTION: posts
:END:
URL: https://quantcodedenny.com/posts/vibe-coding/
** Set the context in LLM
You are a senior staff-level engineer with excellent technical writing, code review, and mentorship skills.

Your task depends on the command prefix I provide before the content.

Your response always: be concise, constructive, and provide both critical feedback + improved rewritten versions where possible.

## Commands & Workflows
---
** /summarize_diff
- Input: raw code diff
- Output:
  1. Clear, concise, and persuasive diff summary (1–2 paragraphs max)
  2. Rate clarity, persuasiveness, readability
  3. Clear step-by-step explanation in plain English
  4. Key edge cases, tradeoffs, or hidden complexities
  5. Rewritten improved version
  6. Bullet-point rationale of changes
---
** /review_code_diff
- Input: code diff
- Output:
  1. Clarity check (is diff easy to understand?)
  2. Persuasiveness check (does it justify change?)
  3. Readability & style improvements
  4. Rewritten improved version of summary/explanation
  5. Bullet-point rationale of changes
---
** /review_unittest
- Input: unit test code + implementation
- Output:
  1. Issues (mocks, async handling, coverage gaps, flakiness)
  2. Functions/test cases affected
  3. Suggestions for missing/stronger tests
  4. Improved test outline if applicable
  5. List of critical missing test cases
  6. Risk coverage rationale
  7. Example test case stubs
---

* Challenges in Vibe Coding                                        :noexport:
:PROPERTIES:
:EXPORT_FILE_NAME: challenge-in-vibe-coding
:EXPORT_DATE: 2025-08-25
:EXPORT_HUGO_SECTION: posts
:END:

URL: https://quantcodedenny.com/posts/vibe-coding/
- different versions: functions not defined; certain functions are not supported
- understand the convention: hugo generate files into docs folder
- no defensive coding which makes debugging difficult
- ox-hugo 0.12.2 默认导出 Markdown 不加 front matter，除非 Org 文件里有特定 property
- For impossible tasks, llm run into a circle instead of admitting a NO.
** Expert mindset for vibe coding
- Embrace imperfection: treat the LLM as a co-pilot, not a guarantee.
- Iterate fast: copy errors to the LLM and ask for fixes immediately—speed > perfect understanding.
- Meta-awareness: question assumptions about project structure, plugin limitations, or API behavior.
- Build guardrails: small checks, logging, or validation to catch mistakes early.
- Layer knowledge: start with minimal reproducible units (file-level) before scaling to project-level.
- Document gaps: track behaviors, limitations, and “unknown unknowns” to avoid repeating mistakes.
- Continuous learning: refine your workflow based on past errors and successful patterns.
- Plan for LLM limitations: predefine expected outputs, constraints, and acceptable fallbacks.

** Technical challenges
- Multiple versions: functions may be undefined or unsupported across versions.
- Understanding conventions: e.g., Hugo generates files into the `docs` folder, not `content`.
- Lack of defensive coding: errors propagate, making debugging harder.
- ox-hugo 0.12.2 exports Markdown without front matter by default unless Org file has specific properties.
- LLM behavior: when facing impossible tasks, it often loops endlessly instead of admitting "No."
- Hidden dependencies: some tasks fail because of unmentioned dependencies or outdated libraries.
- Subtle syntax quirks: small differences in Org, Markdown, or Hugo behavior can break automation.
** Gaps, blind spots & workflow caveats
- Works well for individual files, but not full project structures.
- [#A] You don’t know what you don’t know—and the LLM may not tell you.
- Component limitations arise from business, capability, or incompatibilities:
  - Business: e.g., Twitter free API only allows pulling 100 posts/day.
  - Capability: e.g., Emacs plugin (ox-hugo) only supports Markdown blocks in Org files.
  - Incompatibilities: old methods removed and replaced with incompatible alternatives.
- Assumptions hidden in examples: tutorials or LLM examples often assume a different project layout.
- Don’t overanalyze error messages; capture them and ask the LLM to propose fixes.
- Recognize impossible tasks early—stop LLM loops.
- Treat your Org file as the single source of truth for properties; easier than chasing plugin defaults.
- Version control is essential: track both Org files and exported Markdown to detect regressions.
- Validate outputs frequently: check Hugo build results, Markdown rendering, and front matter correctness.
- Minimize multi-step dependencies when iterating with LLM: isolate failures to one step at a time.
- Keep LLM prompts precise and contextual: vague instructions lead to loops and inconsistent outputs.
