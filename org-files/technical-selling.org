#+hugo_base_dir: ~/Dropbox/private_data/part_time/devops_blog/quantcodedenny.com
#+language: en
#+AUTHOR: dennyzhang
#+HUGO_TAGS: engineering leadership selling
#+TAGS: Important(i) noexport(n)
#+SEQ_TODO: TODO HALF ASSIGN | DONE CANCELED BYPASS DELEGATE DEFERRED
* Focus On P0 At Work
:PROPERTIES:
:EXPORT_FILE_NAME: clarify-p0s-at-work
:EXPORT_DATE: 2025-09-29
:END:
URL: https://quantcodedenny.com/posts/clarify-p0s-at-work/
** My Goal
I establish myself as a tech lead in ML infra with two main goals:
1. Work with **market value** — skills and outcomes recognized externally for career mobility.
2. Minimize **mental stress** — maintain well-being while delivering impact. More reading: [[https://quantcodedenny.com/posts/eq-playbook/][stress less, lead better]].
** My Core Strengths
1. **Self-Accountability**: Take full responsibility for both the work I commit to and the choices I decline, ensuring clarity and ownership in outcomes.
2. **Resiliency**: Maintain determination and focus in the face of obstacles, adapting strategies while keeping long-term goals intact.
3. **Impact-Driven Execution**: Prioritize opportunities that create measurable business wins, balancing scope with available bandwidth.
4. **Collaborative Partnership (Light)**: Work effectively with peers and cross-functional teams by aligning on shared goals and resolving conflicts constructively.
** My Growth Areas
1. **Communicate Clearly & Persuasively**: Align teams on goals and expectations; Summarize my work’s problem, solution, and impact concisely for directors, while keeping technical credibility for peers.
2. **Prioritize High-Leverage Work**: Focus my technical expertise on initiatives that drive measurable impact; delegate or decline low-value work
3. **Collaborate Effectively with Diverse Stakeholders**: Adapt communication style for different roles and personalities; Build alignment and influence without creating friction.
4. **Generalize, Share, & Mentor**: Capture patterns across my projects and share insights to scale impact; Mentor peers and document lessons learned for team adoption.
** Recent Key Learnings
1. **Leverage leadership and structures**
   - Tried bottom-up charter building, but XFN teams already had dedicated roles (reliability, efficiency, DevX).
   - Learning: Tap leadership and structures early to avoid prolonged struggles.

2. **Set bigger, strategic business goals**
   - Focused too narrowly on immediate team bandwidth.
   - Example: HD feature cleanup → incremental changes vs. holistic cleanup.
   - Learning: Aim for system-level impact, not just local optimizations.

3. **Focus on high-impact technical challenges**
   - Spent energy on headcount and conflicts where leverage was low.
   - Learning: Invest where technical expertise makes the most difference.

4. **Be more confident and assertive in requests**
   - Often accepted XFN deprioritization of my asks.
   - Example: Needed output validation (compilation) and feature checks (serving).
   - Learning: Advocate confidently for necessary changes, not just support passively.

5. **Spend more time generalizing problems and exchanging knowledge**
   - Solved problems in isolation, missed patterns and broader exchanges.
   - Learning: Step back, find repeatable insights, and share across teams.
** Mitigation: Navigate Corporate Environment
1. **Make Value Visible**: Impact only counts if it’s measured and communicated.
2. **Align and Advocate**: Influence grows with alignment and proactive advocacy.
3. **Leverage, Don’t Reinvent**: Use existing processes and roles to accelerate outcomes.
** Mitigation: Organically improve market value
1. **Skill Leverage**: Work on rare, transferable, high-impact skills.
2. **Visible Impact**: Quantify and share results internally.
3. **Network & Influence**: Expand reputation via mentorship, XFN projects, and selective external visibility.
** Mitigation: Lower Mental Stress at Work
1. **Systemic Strategies (Change how I work)**: Adjust workflow, environment, and collaboration to minimize recurring stressors.
    - Focus on problems where my technical expertise creates the most leverage; spend less time on areas outside my control (e.g., headcount, politics).
    - Proactively prioritize high-impact technical challenges instead of reacting to every request.
    - Build guardrails and scalable solutions to reduce firefighting.
    - Set clear boundaries: avoid over-committing and delegate or decline tasks others can own.
2. **Personal Strategies (Manage my mind & energy)**: Strengthen resilience to handle unavoidable stress.
    - Develop habits to stay focused and centered under pressure.
    - Protect time and energy for deep work and recovery.
    - Maintain clarity: sustained impact comes from resilience and focus, not from spreading myself thin.
** Success Stories
1. **Feature Cleanup & Bad Feature Governance**
    - Core Strength Demonstrated: Business Problem Focus
    - Challenge: Legacy and unused features caused inefficiencies and stale data risks.
    - Action: Built a reliable feature usage lineage table, automated cleanup, and implemented rapid mitigation plans.
    - Impact: Reduced stale features by X%, minimized downstream errors, and saved engineers’ time.

2. **Feature Metadata Service**
    - Core Strength Demonstrated: End-to-End Ownership & Cross-Team Influence
    - Challenge: Lack of a single source of truth (SoT) for feature metadata made management and discovery difficult.
    - Action: Built a centralized feature metadata service covering both static and runtime metadata.
    - Impact: Enabled consistent feature management, improved discoverability, and reduced errors in feature usage across multiple ML teams.

3. **End-to-End Feature Infra Monitoring**
    - Core Strength Demonstrated: End-to-End Ownership & Cross-Team Influence
    - Challenge: Monitoring was fragmented across feature generation, serving, and model evaluation.
    - Action: Designed and implemented a comprehensive monitoring framework covering generating, serving, and model sides.
    - Impact: Enabled early detection of issues, reducing pipeline downtime and improving overall feature reliability.

4. **Data Pipeline Push at Scale**
    - Core Strength Demonstrated: Collaborative & Fair Partnership
    - Challenge: Pushing streaming pipelines took up to 1 month and slowed model iteration.
    - Action: Optimized infrastructure and processes to enable **scalable, automated pipeline pushes**.
    - Impact: Reduced pipeline deployment time from 1 month → 1 week, accelerating feature iteration and business impact.
** Set LLM context
I want to clarify what is truly important to me at work and identify my 3-year P0 priorities. Below is my current context.

Please help me:
- Identify **core work values** and any conflicts or trade-offs
- Surface **blindspots or overlooked opportunities** in my current approach.
- Suggest what could be my **3-year P0s** based on this context
- Provide guidance on **filtering and prioritizing current workstreams** to align with these P0s.
- Recommend **strategic milestones** or actions to maximize market value, ownership, and energy efficiency

Please make the output:

- **Structured and actionable**
- **Compatible with Org-mode**, so I can copy it directly as a personal roadmap
- Include examples of **practical steps, metrics, or checkpoints** for each milestone
** 3-Year P0 Clarification Procedure                               :noexport:
- Define the Vision
   - Decide what success looks like in 3 years for me and my team.
   - Focus on outcomes, not tasks.
- Identify Levers
   - Find areas where focused effort now gives the biggest long-term impact.
- Set P0 Criteria
   - Define what counts as a true long-term P0 to filter initiatives consistently.
- Filter Workstreams
   - Keep only initiatives that meet my P0 criteria.
   - Delegate, pause, or deprioritize the rest.
- Build the Roadmap
   - Break each P0 into multi-year milestones for strategic execution.
- Checkpoints
** local notes                                                     :noexport:
learning how to learn
adapt to change
resilience
learn how to figure out what people want
how to interact in the world

这些生活体悟，对我很有启发。帮我找到更多类似的体悟，并给出具体示例
- 设立宏大目标可以激励自己和他人: 大目标提供方向感，让日常小努力不至于迷失。
- 千万不要提前焦虑，事情会以奇怪的方式解决
- 生活要做减法
- take the best advantage and enjoy what you already have
- minimalist can improve your freedom
* Scope Better At Work
:PROPERTIES:
:EXPORT_FILE_NAME: scope-better
:EXPORT_DATE: 2025-09-30
:END:
URL: https://quantcodedenny.com/posts/scope-better/
** Introduction
For a successful tech lead, it usually has four steps: [[https://quantcodedenny.com/posts/scope-better/][scope better]] -> do better -> [[https://quantcodedenny.com/posts/look-better/][look better]] -> [[https://quantcodedenny.com/posts/connect-better/][connect better]].

One of the hardest skills to master as a tech lead is *scoping*—understanding the right problems to solve, sizing them correctly, and aligning them with team capacity and organizational priorities. Poor scoping leads to wasted effort, missed deadlines, or over-committing your team. On the other hand, good scoping sets the foundation for execution, influence, and impact.

This blog post is my personal journal on learning to *scope better*. I plan to keep updating it with new experiences, reflections, and frameworks as I encounter different challenges.
** Why Scoping Matters
Scoping is more than estimating timelines. It’s about:

- Choosing the right problems – Focus on work that delivers meaningful impact.
- Defining clear boundaries – Avoid scope creep and ensure deliverables are realistic.
- Aligning expectations – Make sure stakeholders, peers, and the team understand the “what” and “why.”
- Maximizing leverage – Prioritize work that scales or unlocks further opportunities.
** My Approach to Scoping
I’ve found a few practical techniques that help me scope better:

- Start with the problem, not the solution.
  - Ask: "What’s the problem we are really trying to solve?"
- Break work into milestones.
  - Large projects can be intimidating; splitting them into digestible chunks helps estimate more accurately.
- Validate assumptions early.
  - Run experiments, talk to users, or gather data to avoid over-committing to uncertain work.
- Use a "P0-P1-P2" framework.
  - Clearly identify the highest priority work versus nice-to-have work.
- Learn from past projects.
  - Keep track of what was over- or under-scoped and adjust future estimates.
** Finding Good Problems to Solve
A critical part of scoping is *finding good problems to tackle*. Some ways I approach this:

- Look for problems with high leverage—fixes or features that benefit multiple teams or users.
- Focus on repetitive pain points that slow down the org or team.
- Seek ambiguous challenges where clarity and leadership can make a difference.
- Align with org goals to ensure impact is recognized and resources are available.
** Lessons Learned
- It’s iterative.
  - Scoping is rarely perfect the first time. Adjust as new information arrives.
- Communication is key.
  - A well-scoped project is useless if the team and stakeholders don’t understand it.
- Balance ambition and realism.
  - Stretch goals are fine, but over-promising hurts credibility.
** Next Steps
I will continue experimenting with different scoping strategies and documenting outcomes. Over time, I hope this post will become a living guide for myself and others on how to *scope better* as a tech lead.
** Enage LLM for improvement
** local notes                                                     :noexport:
*** [#A] didn't think big enough or run out of ideas: other teams want to help, but there are no work items
*** Some problems are doom to hard to fix.
e.g: ops heavy - trunk health, metadata, etc.
*** slow to go the details
For HD feature management, I know all the context. But takes quite a while to create a one-pager for group discussions.

Similar for feature metadata management
*** [#A] difficult to manage the complexity and articulate it well for the audience to comment
*** target on the most important problems, instead of less critical ones; but within you realm
*** SWE always have more shining projects
** llm prompt to improve market value                              :noexport:
I work on machine learning infra area. I want to pick problems strategically, so that I can build expertise in this area and bring market value.

Work on ML infra reliability, what are the top challenges
* Look Better At Work
:PROPERTIES:
:EXPORT_FILE_NAME: look-better
:EXPORT_DATE: 2025-09-30
:END:
URL: https://quantcodedenny.com/posts/look-better/
** Introduction
For a successful tech lead, it usually has four steps: [[https://quantcodedenny.com/posts/scope-better/][scope better]] -> do better -> [[https://quantcodedenny.com/posts/look-better/][look better]] -> [[https://quantcodedenny.com/posts/connect-better/][connect better]].

Working hard alone isn’t enough. Leaders and decision-makers are busy — if they don’t see my impact, it might as well not exist.

Looking better at work is not self-promotion. It’s about making my contributions **visible, credible, and trusted**. I focus on three things:

- **Business Impact** – What tangible results did I achieve?
- **Complexity & Learning** – What challenges did I overcome, and what did I learn?
- **Credibility** – Did the right people notice my work, and did I involve or acknowledge others?

This post gives me a **daily-ready framework** to apply these principles with minimal thinking.
** Core Principles (3-Minute Shortcut)
- **Impact First**
  - I focus on results, not effort. I quantify outcomes (dollars, time, efficiency) and link them to team or company goals.
  - *Template:* “By doing X, I [saved $Y / improved efficiency by Z% / avoided a risk].”

- **Complexity & Learning**
  - I make hidden challenges and lessons visible. I highlight new skills, methods, or tools that improve future work.
  - *Template:* “This was challenging because [obstacle], and I solved it by [approach]. Learned: [key insight].”

- **Credibility**
  - Feedback from peers is more credible than self-promotion. I share updates, recognize others, and ensure the right people see my work.
  - *Template:* “Thanks to [ally/team], I achieved this result. I shared the approach with [stakeholders].”
** Project Complexity Checklist
- **Challenges & Hurdles**
  - [ ] I highlight major obstacles (technical, organizational, cross-team)
  - [ ] I explain how I solved them or mitigated risks

- **Learning & Innovation**
  - [ ] I capture new skills, methods, frameworks, or tools
  - [ ] I show how they benefit future projects or others

- **Dependencies & Coordination**
  - [ ] I note key dependencies and how I managed them

- **Secondary Impact**
  - [ ] I highlight outcomes beyond immediate metrics (efficiency gains, knowledge transfer)
** Daily & Weekly Runbook
- **Daily (2–5 min)**
  - I pick yesterday’s work and apply the **Impact → Complexity → Credibility** flow.
  - I fill the templates quickly.
  - Optional: I note challenges or insights in a personal log.

- **Weekly (10–15 min)**
  - I review my log and pick 1–2 visible achievements.
  - I share a structured update using templates with my manager, team, or cross-functional stakeholders.
  - I identify allies who can amplify my impact.
** Common Pitfalls
- Overdoing self-promotion damages trust.
- Not surfacing **business value** makes my work look like mere execution.
- Not surfacing **complexity & learning** undervalues my effort.
- Staying invisible leads to missed recognition and opportunities.
- Focusing on busyness instead of impact dilutes my reputation.
** Conclusion
Looking better at work is **not superficial** — it’s telling the full story of my contributions.
**Daily Habit:** Every day, I ask myself:
1. What **impact** can I highlight?
2. What **complexity & learning** did I uncover?
3. Who do I need to involve or inform to **build credibility**?

By following this **checklist + templates**, I make my work **visible, valued, and remembered** without overthinking.
** Enage LLM for improvement
#+BEGIN_SRC text
I have a blog post about "Look Better At Work" written in first-person (I/my) and formatted in Org-mode. I want to **continuously improve it** to make it more actionable, clear, and engaging.

Here’s what I want you to do:

1. **Clarity & Flow**
   - Make the content easy to follow and logically structured.
   - Ensure sentences are concise and avoid repetition.

2. **Actionable Advice**
   - Suggest new tips, examples, or mini-exercises that I can apply in daily work.
   - Include templates, checklists, or habits that reduce my thinking effort.

3. **Engagement**
   - Add relatable examples or short stories that illustrate principles.
   - Highlight the most important points with bold or bullet lists.

4. **Consistency**
   - Keep all references in the first person (I/my).
   - Maintain Org-mode formatting for easy integration.

5. **Enhancements**
   - Suggest sections to add, remove, or merge.
   - Identify gaps or missed angles in the current content.
**Instructions for Output:**
- Provide the improved content directly in Org-mode format.
- Summarize what changed and why (1–2 sentences).
**Input:**
<<Insert current version of the post here>>
**Task:** Improve the post according to the instructions above. Focus on making it **practical, concise, and ready for daily use**.
#+END_SRC
* Connect Better At Work
:PROPERTIES:
:EXPORT_FILE_NAME: connect-better
:EXPORT_DATE: 2025-09-30
:END:
URL: https://quantcodedenny.com/posts/connect-better/
** Introduction
For a successful tech lead, it usually has four steps: [[https://quantcodedenny.com/posts/scope-better/][scope better]] -> do better -> [[https://quantcodedenny.com/posts/look-better/][look better]] -> [[https://quantcodedenny.com/posts/connect-better/][connect better]].

Doing great work is only part of success. My influence grows when others know, trust, and rely on me.

Connecting better at work is most powerful when it becomes a **small daily habit** — one or two simple actions that naturally build trust, relationships, and impact.
** Core Daily Habit
Each day, I focus on **one key action**:

- **Notice & Add Value** – Do at least one of these per day:
  - Ask a thoughtful question to understand someone’s priorities or challenges.
  - Share a useful resource, tip, introduction, or recognition.

- **Follow Through** – Complete or update one commitment each day.
  - If I can’t complete it, I proactively communicate the update.
** Daily Routine (2–3 min each)**
- **Morning:** Pick one person to check in with or help today.
- **During Day:** Apply **one core daily habit** naturally.
- **End of Day:** Log one insight or follow-up for tomorrow; optionally send a quick thank-you or recognition.
** Weekly Reflection (5 min)**
- Who did I meaningfully connect with this week?
- What one helpful action did I take for each person?
- Plan one simple connection action for next week.
** Quick Tips
- Small, consistent actions beat rare grand gestures.
- Focus on **helping others achieve their goals**, not just visibility.
- Keep notes in one place for easy follow-up.
** Common Pitfalls
- Focusing only on networking for personal gain feels transactional.
- Skipping follow-ups reduces trust.
- Ignoring listening or empathy weakens connections.
** Conclusion
Connecting better at work is both a **skill and a habit**. I make it automatic with **one simple action per day**: **notice, add value, or follow through**.

At the end of each week, I reflect briefly: **Who did I understand better, help, or stay connected with, and what simple action will strengthen the connection next week?**
** Enage LLM for improvement
#+BEGIN_SRC text
I have a draft blog post in org-mode about "Connect Better at Work." I want to **continuously improve it**, making it:

1. Clear, concise, and easy to follow.
2. Practical and habit-focused (small, daily actions that are easy to do).
3. Engaging, with examples, tips, or relatable scenarios.
4. Structured and scannable for readers.

Please act as my co-author and do the following:
**Step 1: Analyze**
- Identify overlapping sections, unclear sentences, or redundant points.
- Highlight areas where content could be more practical or actionable.
- Suggest any missing elements that would make it more helpful (e.g., examples, micro-actions, reflections).
**Step 2: Improve**
- Rewrite sentences or sections for clarity and flow.
- Make it more “I”-focused (first-person) if needed.
- Condense overly long sections while keeping essential content.
- Suggest ways to add new, high-value content (tips, mini-case studies, or scenarios).
**Step 3: Expand**
- Add optional content that could enhance the post without overloading the reader (bonus tips, habit variations, illustrative examples).
**Step 4: Present**
- Return the improved blog post in **org-mode format**, ready to copy and paste.
- Include a short note explaining what was changed or added.
**Constraints**
- Keep the post frictionless and practical — readers should be able to apply it daily.
- Avoid making the post too long or complex; prioritize usability over completeness.
- Preserve the original structure where possible (Introduction, Daily Habits, Routine, Reflection, Tips, Common Pitfalls, Conclusion).

Here is the current version of my post:
[Paste your latest org-mode draft here]

Please help me improve it.
#+END_SRC
* Stress Less, Lead Better
:PROPERTIES:
:EXPORT_FILE_NAME: eq-playbook
:EXPORT_DATE: 2025-09-30
:END:
URL: https://quantcodedenny.com/posts/eq-playbook/

As a tech lead, I want to ease my mental stress and be effective in conflict resolution.
This playbook is my daily runbook for staying calm, clear, and constructive under pressure.
** Core Principles
- **Pause Before Reacting**: Don’t let emotions drive my first response.
- **Listen First**: Seek to understand before I respond.
- **Focus on Outcomes**: Anchor on shared goals, not personal wins.
- **Protect My Boundaries**: Say no or redirect misaligned work.
** Difficult Situations and How I Respond
1. **Disagreement on Priorities**
   Example: PM pushes feature delivery, I see infra stability risk.
   → Frame trade-offs clearly; show business risk of ignoring infra.

2. **Boundary-Pushing Requests**
   Example: Asked to own solving cross-team incentive conflicts (low leverage).
   → Acknowledge importance, suggest better owner, offer lightweight support—not ownership.

3. **Cross-Team or Peer Conflict**
   Example: Partner team blames infra for latency spikes, or another TL challenges design harshly.
   → Listen without defensiveness, share data, acknowledge valid points, defuse tension, propose joint debugging or async follow-up.

4. **Escalations from Leadership**
   Example: Director demands “immediate fix” for ongoing SEV.
   → Communicate facts crisply, outline immediate fix + longer-term solution.
** Major Mistakes That Kill Energy
- **Neglecting Health Basics**: Skipping sleep, poor nutrition, dehydration, or no movement → fatigue, irritability, brain fog.
- **Scattered Focus**: Excessive multitasking or context switching → drains efficiency and mental clarity.
- **Ignoring Stress Signals**: Bottling emotions, not addressing mental health → chronic depletion.
- **Weak Boundaries**: Overcommitting or taking low-leverage work → diluted impact, faster burnout.
- **Poor Environment**: Clutter, noise, or bad lighting → reduced focus and motivation.
** Best Practices
- **Recharge Physically**: 7–9 hrs sleep, short naps if needed; move often with walks, stretches, or exercise.
- **Fuel Smartly**: Balanced meals (protein + complex carbs), hydration; limit sugar/caffeine spikes.
- **Work With Focus**: Prioritize clearly (Eisenhower or MITs), batch tasks, avoid overcommitment.
- **Reset Regularly**: Take 5–10 min breaks every 60–90 mins; use mindfulness, journaling, or reflection.
- **Shape the Environment**: Natural light, tidy space, comfortable temp/noise.
- **Communicate Effectively**: Neutral tone, “we” language, fact-driven; summarize agreements; use the cycle Pause → Clarify → Respond → Follow-Up.
** Common Pitfalls to Avoid
- Responding instantly when triggered.
- Framing conflict as win/lose instead of win/win.
- Assuming others share my context without clarification.
- Absorbing misaligned work just to “be helpful.”
** Daily Reminder
- **Start of Day**: Review top 3 priorities; mark what I will say "no" to.
- **Before Meetings**: Pause, breathe once, and note the outcome I want.
- **During Conflict**: Listen fully, then restate what I heard before replying.
- **After 90 Minutes of Work**: Step away for 5 mins; stretch or walk.
- **Midday Check-In**: Drink water, adjust posture, reset focus.
- **End of Day**: Write down one win and one boundary I defended.
** local notes                                                     :noexport:
*** avoid over-delegation and no boundary
weekly audit report: TPM don't want to own it
#+BEGIN_SRC text
As discussed, it would be more effective, if you(or/and XXX) can take it from this point and become POC to run the follow-up conversations.

I don't believe that is the right model though. There should be an E2E owner w/ help needed as is. Let's discuss in the meeting.
#+END_SRC
* Suggest Without Full Context
:PROPERTIES:
:EXPORT_FILE_NAME: suggest-without-context
:EXPORT_DATE: 2025-09-30
:END:
URL: https://quantcodedenny.com/posts/suggest-without-context/

A living runbook for learning from and giving suggestions to other teams
**Why This Matters**: Cross-team collaboration is a critical part of tech lead work, yet you are often asked to provide input on projects where you don’t have full visibility.
- Well-crafted suggestions, grounded in understanding and context, can amplify impact, build credibility, and accelerate learning for both teams.
- Poorly framed suggestions can create friction, reduce trust, or block progress.
** Core Principles
1. Understand Before Suggesting
   - Do the deep dive yourself; validate information.
   - Focus on *what* (goal/outcome), not *how*.
   - Check: Do I understand their goal even with limited context?

2. Respect People and Context
   - Acknowledge effort before giving input.
   - Match discussion level (process vs details).
   - Expect pushback as feedback, not resistance.

3. Keep It Simple and Actionable
   - Avoid information overload.
   - Tie suggestions to metrics and outcomes they care about.
   - Clarify who owns follow-up actions.
   - Check: Are my suggestions relevant, concise, and actionable?

4. Share and Co-Own (Optional)
   - Frame suggestions as options, not orders.
   - Offer help or co-ownership to turn ideas into action.
   - Check: Am I ready to co-own implementation or provide support if needed?
** Scenarios & How to Engage
*** High-Pressure, Short-Context Scenarios
(Few minutes to give input, limited context)
- **Approach**
  - Focus on the goal or desired outcome.
  - Ask high-leverage, pattern-based questions.
  - Prioritize comments that are high-impact and low-risk.
  - Signal limited context but contribute thoughtfully.
  - Clarify follow-up / ownership if action is triggered.
- **Examples**
  - SEV postmortem review
  - Rapid design review
  - Urgent cross-team triage
*** Scenario: Standard Context Scenarios
(More time to explore context)
- **Approach**
  - Deep dive into details if needed.
  - Understand tradeoffs and context fully.
  - Offer concrete suggestions with examples from prior experience.
  - Frame suggestions in alignment with team goals.
- **Examples**
  - Process improvement sharing
  - Quarterly roadmap sync
  - Tooling/infra collaboration
** LLM Prompt Template for Continuous Improvement
#+BEGIN_SRC text
I’m updating my "Suggest Without Full Context" runbook.

Please:
1. Incorporate them into the blog structure (principles, scenarios, checklist).
2. Smooth the flow for readability.
3. Highlight new insights and actionable points.
4. Use org-mode format for output

Here are my raw notes in org-mode format:
<PASTE NOTES>
#+END_SRC
* Improve Market Value
:PROPERTIES:
:EXPORT_FILE_NAME: improve-market-value
:EXPORT_DATE: 2025-10-03
:END:
URL: https://quantcodedenny.com/posts/improve-market-value/

Working deeply in a specialized area like Meta or Google ML infra can easily make your expertise feel *too narrow* — you solve critical problems, but your broader market value may not fully reflect your capabilities. This post is a living document to help tech leads *organically increase market value*, stay visible, and continuously improve.

** 1. Guiding Principles
- Think End-to-End
  + Always maintain a mental map of the full system — data flows, dependencies, upstream/downstream impacts, and business objectives.
  + Avoid getting trapped in local optimization that doesn’t move the business needle.
- Translate Impact into Language the Market Understands
  + Frame accomplishments in terms of revenue, cost savings, reliability, or scale.
  + Example: "Reduced ad delivery latency by 15%" → "Improved ad revenue predictability by X%".
- Balance Depth with Breadth
  + Deep technical mastery is necessary, but *marketable leaders understand context and patterns beyond their domain*.
  + Learn industry-standard practices in system design, reliability, and observability — even if you don’t apply them directly every day.
- Document and Share Your Thinking
  + Writing blog posts, notes, or internal wikis shows both clarity of thought and knowledge-sharing ability.
  + Enables future opportunities to easily identify your impact.
- Leverage Cross-Team Learning
  + Seek input from other teams to understand tradeoffs, common pitfalls, and best practices.
  + Increases visibility and broadens your domain expertise.

** 2. Good Practices
| Practice                                                | Why it Works                              | Example                                                                                                      |
|---------------------------------------------------------+-------------------------------------------+--------------------------------------------------------------------------------------------------------------|
| Framing a P0 incident with root cause & business impact | Shows problem-solving and business acumen | "Ad infra SEV reduced ads served by 10%; we implemented a cache strategy that restored 100% within 3 hours." |
| Designing scalable systems with foresight               | Highlights technical leadership           | Using sharded pipelines anticipating 10x growth in queries.                                                  |
| Sharing reusable learnings                              | Demonstrates influence                    | Internal blog posts or shared runbooks that prevent repeated mistakes across teams.                          |
| Asking strategic questions before designing             | Shows judgment beyond execution           | "If we scale 5x, how will this design handle eventual consistency and data staleness?"                       |

** 3. Bad Practices
| Practice                            | Why it Hurts                     | Example                                                                     |
|-------------------------------------+----------------------------------+-----------------------------------------------------------------------------|
| Focusing only on local optimization | Can obscure marketable impact    | Fixing a single API latency without quantifying broader effect.             |
| Not documenting decisions           | Reduces visibility & credibility | Team forgets key design choices; knowledge is siloed.                       |
| Avoiding ambiguous problems         | Signals lack of leadership       | Ignoring a system-level problem because "it’s not my area."                 |
| Over-reliance on specific tech      | Limits future mobility           | Mastering internal infra tools without understanding underlying principles. |

** 4. Daily Runbook Approach
1. Daily Reflection: Capture what you learned, decisions made, and tradeoffs considered.
2. Weekly Market Mapping: Identify external relevance — could your work be applied elsewhere? How would you explain it in industry terms?
3. Monthly Patterns Review: Aggregate recurring issues, solutions, and lessons learned.
4. Quarterly LLM Update: Use an LLM to summarize, reframe, and extract marketable insights.

** 5. LLM Prompt Template for Continuous Improvement
#+BEGIN_SRC text
Context:
I am a tech lead working in Meta Ads Infra. 
I am maintaining a runbook of learnings, decisions, and tradeoffs.

Task:
1. Summarize the key patterns and decisions from the following notes.
2. Highlight marketable achievements in a way understandable outside my company.
3. Identify gaps in breadth or end-to-end thinking that could increase my market value.
4. Suggest improvements or principles I should focus on next.
5. The output should be in org-mode format

Notes:
[PASTE YOUR RUNBOOK OR WEEKLY NOTES HERE]
#+END_SRC
* #  --8<-------------------------- separator ------------------------>8-- :noexport:
* Improve tech lead mindsets                                       :noexport:
:PROPERTIES:
:EXPORT_FILE_NAME: improve-techlead-mindset
:EXPORT_DATE: 2025-09-14
:END:
URL: https://quantcodedenny.com/posts/improve-techlead-mindset/
** Set LLM context
You are a mentor and coach for a tech lead aiming to develop a mega-learning mindset and improve general problem-solving.

The tech lead wants to avoid these common mistakes:
1. **Think too narrow** – focusing too narrowly on immediate tasks or familiar solutions, missing hidden risks and opportunities.
2. **Try to do it alone** – solving problems alone without tapping into team knowledge, feedback, or prior experiences.
3. **Stuck in exeuction mode** – prioritizing immediate wins or tactical fixes over strategic, long-term impact.
4. **Not learning from the past** – not capturing lessons, failing to generalize insights, or missing opportunities to improve thinking and processes.
5. **Overlook dependencies** – overlooking upstream/downstream service risks, team conflicts, or misaligned priorities that block progress.

Provide:
1. **Mindset shifts** to overcome these mistakes
2. **Concrete habits or exercises** for daily practice
3. **Examples of how AI can help** the tech lead think faster, learn smarter, and act strategically
4. **Ways to reflect and generalize learnings** across projects

Respond in an actionable, structured, and role-aware manner, as if coaching a tech lead directly.
** Weekly Accomplishment Checklist
*** Think Too Narrow
- [ ] For 1 project, list at least 3 risks and 2 long-term impacts before deciding
- [ ] Write down 2 "what if" questions per project to force broader thinking
- [ ] Use AI: suggest blind spots, generate alternative scenarios, highlight hidden risks
*** Try to Do It Alone
- [ ] Schedule at least 1 short sync (15–20 min) with a peer/mentor for input
- [ ] Share 1 work-in-progress doc with your team and collect at least 2 comments
- [ ] Use AI: summarize prior lessons, polish drafts, surface unclear points before sharing
*** Stuck in Execution Mode
- [ ] Review your task list and mark 3 tasks as high-impact vs. low-impact
- [ ] Run 1 pre-mortem this week (write 3 failure modes + mitigations)
- [ ] Use AI: simulate outcomes, suggest trade-offs, stress-test assumptions
*** Not Learning From the Past
- [ ] Write a weekly reflection (max 10 sentences): what worked, what failed, lessons
- [ ] Share 1 distilled lesson with your team in Slack/email
- [ ] Use AI: synthesize reflections into principles, reframe lessons into concise takeaways
*** Overlook Dependencies
- [ ] Identify 2 dependencies for your current project; confirm reliability with owners
- [ ] Hold 1 alignment check-in (15 min) with a partner team or stakeholder
- [ ] Use AI: map upstream/downstream risks, draft alignment agenda/questions
** top skills to learn in the AI world                             :noexport:
I want to identify a list of top skills to learn with the rise of AI.

Mindset
- Be a learner, adapter, and synthesizer: Knowledge + action + insight = value.
- Leverage AI to amplify, not replace thinking: Tools speed execution; humans provide judgment.
- Embrace uncertainty: AI accelerates change; resilience and curiosity are your superpowers.

Top skills

- Learning How to Learn (Meta-Learning): AI evolves fast; new tools, models, and frameworks appear constantly.
- Human-Centric Insight (Understanding People): AI is a tool; impact comes from solving real human problems.
- Interpersonal & Systems Interaction: AI amplifies output, but collaboration is still key.
- Creative & Strategic Thinking: AI can generate ideas; humans decide which are valuable.
- Adaptability & Flexibility: AI disrupts industries; roles and best practices change quickly.
- Resilience & Growth Mindset: AI projects often fail or produce unexpected outputs.
** local notes
- stay too long in a bad setup
- pick a wrong problem & direction
- not utilize your network
- lack structure thinking/framing
* Challenges For Working In Big Corporates                         :noexport:
:PROPERTIES:
:EXPORT_FILE_NAME: generalize_working_experience
:EXPORT_DATE: 2025-08-25
:END:

URL: https://quantcodedenny.com/posts/generalize_working_experiene/
** Find the right problems
Challenges:
- Identifying impactful problems vs “noise.”
- Securing scope, alignment, and funding across stakeholders.

Learnings:
- Invest early in problem discovery and framing.
- Anchor decisions to business/infra impact to gain support.
** Driving Execution Across Teams
Challenges:

- Teams have different positions, priorities, and opinions.
- Alignment often requires negotiation and compromise.

Learnings:
- Clear communication and shared goals are essential.
- Build trust and credibility to influence without authority.
- Balance speed vs thoroughness based on context.
** Technical & System Complexity
Challenges:
- Dealing with infra-scale technical challenges (reliability, scalability, latency).
- Legacy issues (e.g., unreliable validation framework).

Learnings:
- Build guardrails and observability to make systems resilient.
- Incremental improvements often scale better than one-off fixes.
** Delivering Impact Under Constraints
Challenge:
- Limited time, resources, and competing priorities make it impossible to build a “perfect” solution.

Learning:
- Define clear success criteria up front. Focus on what delivers the most impact, and avoid over-engineering.
** Evolving with Ambiguity
Challenges:
- Requirements and priorities shift frequently in Ads/Infra.
- Early-stage projects often lack clear ownership or metrics.

Learnings:
- Clarify success criteria early, but stay flexible as context evolves.
- Break down big ambiguous goals into smaller milestones to maintain momentum.
** People & Growth
Challenges:
- Scaling yourself beyond individual contribution.
- Onboarding and up-leveling new team members while delivering on projects.

Learnings:

Document and codify best practices (guardrails, playbooks, runbooks).

Mentoring and enabling others multiplies long-term impact.
** #  --8<-------------------------- separator ------------------------>8-- :noexport:
** prompt                                                          :noexport:
Master Prompt: Critical Thinking for Big Corporate Leadership

You are my senior staff+ mentor and leadership coach.
Context: I am aiming to thrive as an Uber Tech Lead (IC6/IC7) in a large, competitive corporate environment. My key challenge is to improve critical thinking and strategic decision-making so I can scale my influence, navigate complex politics, and drive high-leverage outcomes.

Your role: Help me analyze problems, sharpen judgment, and elevate thinking beyond execution.

What I Want From You
1. Structured Thinking Partner – Break down messy, ambiguous situations into clear frameworks (impact, tradeoffs, stakeholders, incentives).
- Strategic Lens – Reframe my problems from a director/VP perspective (business impact, long-term sustainability, alignment).
- Critical Questioning – Push me with tough, clarifying questions that reveal blind spots and force deeper reasoning.
- Scenario Testing – Stress-test my assumptions by presenting alternative perspectives or unintended consequences.
- Practical Playbook – Offer actionable steps I can use in meetings, proposals, or influencing discussions.

Output Format
1. Reframe: Restate the issue in strategic/critical terms.
- Key Dimensions: List angles I should evaluate (e.g., incentives, risks, org politics, ROI).
- Critical Questions: What I should ask myself/others to sharpen judgment.
- Options & Tradeoffs: Possible paths with pros/cons.
- Recommendation: Balanced, pragmatic advice for a senior IC.

Tone & Style
- spirational but grounded in corporate reality.
- Concise and structured (executive-style thinking).

Probing and challenging, not just agreeable.

Always tie technical choices to business outcomes and influence building.
** Driving Execution Across Teams                                  :noexport:
Challenges:

- Teams have different positions, priorities, and opinions.
- Alignment often requires negotiation and compromise.

Learnings:
- Clear communication and shared goals are essential.
- Build trust and credibility to influence without authority.
- Balance speed vs thoroughness based on context.
** local notes                                                     :noexport:
what work you want to say yes, what work you want to say no

increase your team's strategic values

make unfixable issues fixable: identify and fix the bottleneck
*** Scope fight
*** Find the right problems & set the right goals
Challenges:
- Identifying impactful problems vs “noise.”
- Securing scope, alignment, and funding across stakeholders.

Learnings:
- Invest early in problem discovery and framing.
- Anchor decisions to business/infra impact to gain support.
*** See the big picture, in order to focus on import problem
*** Dependencies & Unreliable Components
Challenges:
- Cross-team and cross-system dependencies introduce fragility.
- Upstream changes or weak components can block progress.

Learnings:
- Invest in automated validation and monitoring to catch issues early.
- Design with failure scenarios in mind (graceful degradation, fallbacks).

know which problems to fix, and how to fix

clear communication to have a common understanding

lack of domain knowledge: model/feature usage table

focus the discussion on the important things
| Category                    | Principle                 | How / Example                                                       | Pitfall if Ignored                     |
|-----------------------------+---------------------------+---------------------------------------------------------------------+----------------------------------------|
| Impact & Value              | Show delta value          | Tie infra work to visible business outcomes (“caching = +50ms CTR”) | Seen as busy work, sidelined           |
|                             | Clarify success upfront   | Define measurable “done”                                            | Moving goalposts, lost credibility     |
|                             | Storytell foundation work | Connect invisible work to org priorities                            | Looks like low-impact maintenance      |
|-----------------------------+---------------------------+---------------------------------------------------------------------+----------------------------------------|
| Strategy & Alignment        | Frame with incentives     | Link to director/org goals                                          | Tech debt talk = no traction           |
|                             | Preempt tradeoffs         | Offer options + recs                                                | Leaders lose trust in surprises        |
|                             | Clarify ownership         | Define role, follow-ups, timeline                                   | Over-commitment, free work             |
|-----------------------------+---------------------------+---------------------------------------------------------------------+----------------------------------------|
| Influence & Persuasion      | Credible input            | Synthesize before commenting                                        | Shallow remarks dilute influence       |
|                             | Manage up with foresight  | Anticipate director’s mix of tech + people                          | Seen as execution-only                 |
|                             | Lead with presence        | Summarize tensions, propose balance                                 | Silent = invisible; dominate = blocker |
|-----------------------------+---------------------------+---------------------------------------------------------------------+----------------------------------------|
| Execution & Resilience      | Prioritize leverage       | Focus on high-value over urgencies                                  | Stuck in ops, not strategy             |
|                             | Push through chaos        | Persistent follow-ups until resolved                                | Priorities die quietly                 |
|                             | Stay calm in conflict     | Facts + tone + clarity in SEVs                                      | Emotional escalation breaks trust      |
|-----------------------------+---------------------------+---------------------------------------------------------------------+----------------------------------------|
| Collaboration & Empowerment | Helpful, not free         | Clarify, connect, unblock — don’t do all                            | Burnout, undervalued time              |
|                             | Multiply team output      | Remove friction, standardize runbooks                               | Compete vs. empower = limited scale    |
|-----------------------------+---------------------------+---------------------------------------------------------------------+----------------------------------------|
| Growth & Presence           | Reflect & learn           | Postmortem own leadership moves                                     | Repeat same mistakes                   |
|                             | Focus big wins            | Champion 1–2 org-level bets                                         | Spread thin, unfocused                 |
|                             | Build presence gradually  | Calm energy + clarity + visible progress                            | Talk a lot, impact little              |
*** #  --8<-------------------------- separator ------------------------>8-- :noexport:
** patterns of issues
*** People: build procedure, instead of solution
** good principles
*** build common tooling is generally good for all teams
*** counterarugment metrics can avoid over-optimize the solution in only one angle
