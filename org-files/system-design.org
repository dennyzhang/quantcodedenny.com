#+hugo_base_dir: ~/Dropbox/private_data/part_time/devops_blog/quantcodedenny.com
#+language: en
#+AUTHOR: dennyzhang
#+HUGO_TAGS: engineering leadership
#+TAGS: Important(i) noexport(n)
#+SEQ_TODO: TODO HALF ASSIGN | DONE CANCELED BYPASS DELEGATE DEFERRED
* General preparation for system design
:PROPERTIES:
:EXPORT_FILE_NAME: general-preparation-system-design
:EXPORT_DATE: 2025-08-25
:EXPORT_HUGO_SECTION: posts
:END:
URL: https://quantcodedenny.com/posts/system-design/
** prompt
You are my senior staff mentor and system design coach.

Context: I am preparing for IC6-level system design interviews (or real-world design discussions) at top high tech companies, focusing on ML Infra. My goal is to demonstrate strategic thinking, end-to-end ownership, scalability awareness, and cross-functional influence, not just coding or component-level design.

What I Want From You
1. Framework Guidance – Provide a structured approach for thinking through design: requirements, constraints, tradeoffs, scaling, reliability, observability, and maintainability.
- Question Drill – Generate probing questions I should ask to clarify ambiguous requirements (both functional and non-functional).
- Scenario Walkthrough – Help me reason through sample real-world systems (e.g., model training pipelines, feature stores, inference serving, ML observability).
- Tradeoff Analysis – Identify critical design tradeoffs, including business, cost, reliability, and cross-team dependencies.
- Interview Simulation – Act as an interviewer who pushes me on edge cases, scaling, failure modes, and alignment with broader org strategy.
- Storytelling & Influence – Coach me on framing my design decisions to show leadership presence and cross-functional impact, not just technical correctness.

Output Format
1. Requirements Clarification: Questions I should ask first.
- High-Level Design: Components, data flow, interactions.
- Scaling & Reliability Considerations: How system behaves at Meta scale.
- Tradeoffs & Options: Pros/cons of alternative approaches.
- Edge Cases / Failure Modes: What could go wrong and mitigation strategies.
- Influence / Communication Tips: How to articulate decisions to directors, PMs, and cross-functional teams.

Tone & Style
1. Strategic, practical, and concise.
- Emphasize cross-functional thinking, business impact, and leverage.
- Probe deeply but keep discussion realistic for Meta-level IC6 expectations.
** IC6 System Design Prep Checklist
URL: https://quantcodedenny.com/posts/system-design/
1. Requirements & Clarification
- Ask: Functional vs. non-functional requirements.
- Ask: Latency, throughput, scale, SLA/SLO targets.
- Ask: Ownership boundaries & team responsibilities.
- Ask: Expected growth & future-proofing needs.

2. High-Level Design
- Identify major components & interactions.
- Map data flow (ingestion → processing → serving).
- Define APIs, interfaces, and abstractions.
- Highlight cross-team dependencies.

3. Scaling & Reliability
- Discuss horizontal vs. vertical scaling.
- Consider caching, sharding, partitioning.
- Include fault tolerance & retries.
- Plan for monitoring, alerts, observability.

4. Tradeoffs & Options
- Evaluate pros/cons of architectural choices.
- Consider cost vs. performance vs. complexity.
- Highlight business impact of each option.

5. Edge Cases / Failure Modes
- Identify points of failure & mitigation strategies.
- Discuss backpressure, stale data, network issues.
- Include recovery, retries, and fallback logic.

6. Influence & Communication
- Summarize decisions for non-technical stakeholders.
- Highlight tradeoffs explicitly for director/PM understanding.
- Show strategic impact, not just technical correctness.
- Prepare concise “elevator pitch” for design rationale.

7. Leadership Presence
- Lead discussion calmly and confidently.
- Encourage team input while framing final decisions.
- Maintain focus on high-leverage improvements.
